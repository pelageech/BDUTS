services:
  lb:
    build: .
    ports:
      - "8080:8080"
      - "8081:8081"


  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus/
    container_name: prometheus
    hostname: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      TZ: "Europe/Moscow"








#    networks:
#      mynetwork:
#        ipv4_address: 192.168.128.128

#  node-exporter:
#    image: prom/node-exporter
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    container_name: exporter
#    hostname: exporter
#    command:
#      - --path.procfs=/host/proc
#      - --path.sysfs=/host/sys
#      - --collector.filesystem.ignored-mount-points
#      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
#    ports:
#      - 9100:9100
#    restart: unless-stopped
#    environment:
#      TZ: "Europe/Moscow"
#    networks:
#      mynetwork:
#        ipv4_address: 192.168.128.128
#
#  grafana:
#    image: grafana/grafana
#    user: root
#    depends_on:
#      - prometheus
#    ports:
#      - 3000:3000
#    volumes:
#      - ./grafana:/var/lib/grafana
#      - ./grafana/provisioning/:/etc/grafana/provisioning/
#    container_name: grafana
#    hostname: grafana
#    restart: unless-stopped
#    environment:
#      TZ: "Europe/Moscow"
#    networks:
#      mynetwork:
#        ipv4_address: 192.168.128.128
#
#networks:
#  mynetwork:
#    driver: default
#    ipam:
#      config:
#        - subnet: 192.168.0.0/16

      #    networks:
      #      mynetwork:
      #        ipv4_address: 192.168.128.128

#  graphics-server:
#    build:
#      context: ./backends/graphics_server
#    ports:
#      - "3031:3031"
#    networks:
#      mynetwork:
#        ipv4_address: 192.168.0.1